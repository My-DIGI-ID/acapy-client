/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.my_digi_id.acapy_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.my_digi_id.acapy_client.invoker.JSON;


/**
 * IndyPresPredSpec
 */
@JsonPropertyOrder({
  IndyPresPredSpec.JSON_PROPERTY_CRED_DEF_ID,
  IndyPresPredSpec.JSON_PROPERTY_NAME,
  IndyPresPredSpec.JSON_PROPERTY_PREDICATE,
  IndyPresPredSpec.JSON_PROPERTY_THRESHOLD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-12T14:46:41.984298+01:00[Europe/Berlin]")
public class IndyPresPredSpec {
  public static final String JSON_PROPERTY_CRED_DEF_ID = "cred_def_id";
  private String credDefId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * Predicate type (&#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;&gt;&#x3D;&#39;, or &#39;&gt;&#39;)
   */
  public enum PredicateEnum {
    LESS_THAN("<"),
    
    LESS_THAN_OR_EQUAL_TO("<="),
    
    GREATER_THAN_OR_EQUAL_TO(">="),
    
    GREATER_THAN(">");

    private String value;

    PredicateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PredicateEnum fromValue(String value) {
      for (PredicateEnum b : PredicateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PREDICATE = "predicate";
  private PredicateEnum predicate;

  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private Integer threshold;


  public IndyPresPredSpec credDefId(String credDefId) {
    this.credDefId = credDefId;
    return this;
  }

   /**
   * Credential definition identifier
   * @return credDefId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag", value = "Credential definition identifier")
  @JsonProperty(JSON_PROPERTY_CRED_DEF_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCredDefId() {
    return credDefId;
  }


  @JsonProperty(JSON_PROPERTY_CRED_DEF_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredDefId(String credDefId) {
    this.credDefId = credDefId;
  }


  public IndyPresPredSpec name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Attribute name
   * @return name
  **/
  @ApiModelProperty(example = "high_score", required = true, value = "Attribute name")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public IndyPresPredSpec predicate(PredicateEnum predicate) {
    this.predicate = predicate;
    return this;
  }

   /**
   * Predicate type (&#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;&gt;&#x3D;&#39;, or &#39;&gt;&#39;)
   * @return predicate
  **/
  @ApiModelProperty(example = ">=", required = true, value = "Predicate type ('<', '<=', '>=', or '>')")
  @JsonProperty(JSON_PROPERTY_PREDICATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PredicateEnum getPredicate() {
    return predicate;
  }


  @JsonProperty(JSON_PROPERTY_PREDICATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPredicate(PredicateEnum predicate) {
    this.predicate = predicate;
  }


  public IndyPresPredSpec threshold(Integer threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * Threshold value
   * @return threshold
  **/
  @ApiModelProperty(required = true, value = "Threshold value")
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreshold(Integer threshold) {
    this.threshold = threshold;
  }


  /**
   * Return true if this IndyPresPredSpec object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndyPresPredSpec indyPresPredSpec = (IndyPresPredSpec) o;
    return Objects.equals(this.credDefId, indyPresPredSpec.credDefId) &&
        Objects.equals(this.name, indyPresPredSpec.name) &&
        Objects.equals(this.predicate, indyPresPredSpec.predicate) &&
        Objects.equals(this.threshold, indyPresPredSpec.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credDefId, name, predicate, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndyPresPredSpec {\n");
    sb.append("    credDefId: ").append(toIndentedString(credDefId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    predicate: ").append(toIndentedString(predicate)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

