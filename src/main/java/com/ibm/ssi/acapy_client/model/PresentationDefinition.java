/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.ssi.acapy_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ibm.ssi.acapy_client.model.ClaimFormat;
import com.ibm.ssi.acapy_client.model.InputDescriptors;
import com.ibm.ssi.acapy_client.model.SubmissionRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.ibm.ssi.acapy_client.invoker.JSON;


/**
 * PresentationDefinition
 */
@JsonPropertyOrder({
  PresentationDefinition.JSON_PROPERTY_FORMAT,
  PresentationDefinition.JSON_PROPERTY_ID,
  PresentationDefinition.JSON_PROPERTY_INPUT_DESCRIPTORS,
  PresentationDefinition.JSON_PROPERTY_NAME,
  PresentationDefinition.JSON_PROPERTY_PURPOSE,
  PresentationDefinition.JSON_PROPERTY_SUBMISSION_REQUIREMENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-11T17:04:23.656276+02:00[Europe/Berlin]")
public class PresentationDefinition {
  public static final String JSON_PROPERTY_FORMAT = "format";
  private ClaimFormat format;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_INPUT_DESCRIPTORS = "input_descriptors";
  private List<InputDescriptors> inputDescriptors = null;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PURPOSE = "purpose";
  private String purpose;

  public static final String JSON_PROPERTY_SUBMISSION_REQUIREMENTS = "submission_requirements";
  private List<SubmissionRequirements> submissionRequirements = null;


  public PresentationDefinition format(ClaimFormat format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ClaimFormat getFormat() {
    return format;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormat(ClaimFormat format) {
    this.format = format;
  }


  public PresentationDefinition id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique Resource Identifier
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3fa85f64-5717-4562-b3fc-2c963f66afa6", value = "Unique Resource Identifier")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public PresentationDefinition inputDescriptors(List<InputDescriptors> inputDescriptors) {
    this.inputDescriptors = inputDescriptors;
    return this;
  }

  public PresentationDefinition addInputDescriptorsItem(InputDescriptors inputDescriptorsItem) {
    if (this.inputDescriptors == null) {
      this.inputDescriptors = new ArrayList<>();
    }
    this.inputDescriptors.add(inputDescriptorsItem);
    return this;
  }

   /**
   * Get inputDescriptors
   * @return inputDescriptors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INPUT_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InputDescriptors> getInputDescriptors() {
    return inputDescriptors;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputDescriptors(List<InputDescriptors> inputDescriptors) {
    this.inputDescriptors = inputDescriptors;
  }


  public PresentationDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Human-friendly name that describes what the presentation definition pertains to
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Human-friendly name that describes what the presentation definition pertains to")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public PresentationDefinition purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

   /**
   * Describes the purpose for which the Presentation Definition&#39;s inputs are being requested
   * @return purpose
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes the purpose for which the Presentation Definition's inputs are being requested")
  @JsonProperty(JSON_PROPERTY_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPurpose() {
    return purpose;
  }


  @JsonProperty(JSON_PROPERTY_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public PresentationDefinition submissionRequirements(List<SubmissionRequirements> submissionRequirements) {
    this.submissionRequirements = submissionRequirements;
    return this;
  }

  public PresentationDefinition addSubmissionRequirementsItem(SubmissionRequirements submissionRequirementsItem) {
    if (this.submissionRequirements == null) {
      this.submissionRequirements = new ArrayList<>();
    }
    this.submissionRequirements.add(submissionRequirementsItem);
    return this;
  }

   /**
   * Get submissionRequirements
   * @return submissionRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SUBMISSION_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SubmissionRequirements> getSubmissionRequirements() {
    return submissionRequirements;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSION_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmissionRequirements(List<SubmissionRequirements> submissionRequirements) {
    this.submissionRequirements = submissionRequirements;
  }


  /**
   * Return true if this PresentationDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresentationDefinition presentationDefinition = (PresentationDefinition) o;
    return Objects.equals(this.format, presentationDefinition.format) &&
        Objects.equals(this.id, presentationDefinition.id) &&
        Objects.equals(this.inputDescriptors, presentationDefinition.inputDescriptors) &&
        Objects.equals(this.name, presentationDefinition.name) &&
        Objects.equals(this.purpose, presentationDefinition.purpose) &&
        Objects.equals(this.submissionRequirements, presentationDefinition.submissionRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, id, inputDescriptors, name, purpose, submissionRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresentationDefinition {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputDescriptors: ").append(toIndentedString(inputDescriptors)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    submissionRequirements: ").append(toIndentedString(submissionRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

