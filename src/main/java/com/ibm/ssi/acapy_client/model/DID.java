/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.ssi.acapy_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.ibm.ssi.acapy_client.invoker.JSON;


/**
 * DID
 */
@JsonPropertyOrder({
  DID.JSON_PROPERTY_DID,
  DID.JSON_PROPERTY_KEY_TYPE,
  DID.JSON_PROPERTY_METHOD,
  DID.JSON_PROPERTY_POSTURE,
  DID.JSON_PROPERTY_VERKEY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-28T08:24:27.640452+02:00[Europe/Berlin]")
public class DID {
  public static final String JSON_PROPERTY_DID = "did";
  private String did;

  /**
   * Key type associated with the DID
   */
  public enum KeyTypeEnum {
    ED25519("ed25519"),
    
    BLS12381G2("bls12381g2");

    private String value;

    KeyTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KeyTypeEnum fromValue(String value) {
      for (KeyTypeEnum b : KeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KEY_TYPE = "key_type";
  private KeyTypeEnum keyType;

  /**
   * Did method associated with the DID
   */
  public enum MethodEnum {
    SOV("sov"),
    
    KEY("key");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  private MethodEnum method;

  /**
   * Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet
   */
  public enum PostureEnum {
    PUBLIC("public"),
    
    POSTED("posted"),
    
    WALLET_ONLY("wallet_only");

    private String value;

    PostureEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PostureEnum fromValue(String value) {
      for (PostureEnum b : PostureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POSTURE = "posture";
  private PostureEnum posture;

  public static final String JSON_PROPERTY_VERKEY = "verkey";
  private String verkey;


  public DID did(String did) {
    this.did = did;
    return this;
  }

   /**
   * DID of interest
   * @return did
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "WgWxqztrNooG92RXvxSTWv", value = "DID of interest")
  @JsonProperty(JSON_PROPERTY_DID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDid() {
    return did;
  }


  @JsonProperty(JSON_PROPERTY_DID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDid(String did) {
    this.did = did;
  }


  public DID keyType(KeyTypeEnum keyType) {
    this.keyType = keyType;
    return this;
  }

   /**
   * Key type associated with the DID
   * @return keyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ed25519", value = "Key type associated with the DID")
  @JsonProperty(JSON_PROPERTY_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KeyTypeEnum getKeyType() {
    return keyType;
  }


  @JsonProperty(JSON_PROPERTY_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeyType(KeyTypeEnum keyType) {
    this.keyType = keyType;
  }


  public DID method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * Did method associated with the DID
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sov", value = "Did method associated with the DID")
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MethodEnum getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public DID posture(PostureEnum posture) {
    this.posture = posture;
    return this;
  }

   /**
   * Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet
   * @return posture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "wallet_only", value = "Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet")
  @JsonProperty(JSON_PROPERTY_POSTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostureEnum getPosture() {
    return posture;
  }


  @JsonProperty(JSON_PROPERTY_POSTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosture(PostureEnum posture) {
    this.posture = posture;
  }


  public DID verkey(String verkey) {
    this.verkey = verkey;
    return this;
  }

   /**
   * Public verification key
   * @return verkey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV", value = "Public verification key")
  @JsonProperty(JSON_PROPERTY_VERKEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVerkey() {
    return verkey;
  }


  @JsonProperty(JSON_PROPERTY_VERKEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerkey(String verkey) {
    this.verkey = verkey;
  }


  /**
   * Return true if this DID object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DID DID = (DID) o;
    return Objects.equals(this.did, DID.did) &&
        Objects.equals(this.keyType, DID.keyType) &&
        Objects.equals(this.method, DID.method) &&
        Objects.equals(this.posture, DID.posture) &&
        Objects.equals(this.verkey, DID.verkey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(did, keyType, method, posture, verkey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DID {\n");
    sb.append("    did: ").append(toIndentedString(did)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    posture: ").append(toIndentedString(posture)).append("\n");
    sb.append("    verkey: ").append(toIndentedString(verkey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

