/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.ssi.acapy_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ibm.ssi.acapy_client.model.CredentialStatusOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.ibm.ssi.acapy_client.invoker.JSON;


/**
 * LDProofVCDetailOptions
 */
@JsonPropertyOrder({
  LDProofVCDetailOptions.JSON_PROPERTY_CHALLENGE,
  LDProofVCDetailOptions.JSON_PROPERTY_CREATED,
  LDProofVCDetailOptions.JSON_PROPERTY_CREDENTIAL_STATUS,
  LDProofVCDetailOptions.JSON_PROPERTY_DOMAIN,
  LDProofVCDetailOptions.JSON_PROPERTY_PROOF_PURPOSE,
  LDProofVCDetailOptions.JSON_PROPERTY_PROOF_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-11T17:04:23.656276+02:00[Europe/Berlin]")
public class LDProofVCDetailOptions {
  public static final String JSON_PROPERTY_CHALLENGE = "challenge";
  private String challenge;

  public static final String JSON_PROPERTY_CREATED = "created";
  private String created;

  public static final String JSON_PROPERTY_CREDENTIAL_STATUS = "credentialStatus";
  private CredentialStatusOptions credentialStatus;

  public static final String JSON_PROPERTY_DOMAIN = "domain";
  private String domain;

  public static final String JSON_PROPERTY_PROOF_PURPOSE = "proofPurpose";
  private String proofPurpose;

  public static final String JSON_PROPERTY_PROOF_TYPE = "proofType";
  private String proofType;


  public LDProofVCDetailOptions challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

   /**
   * A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (&#x3D;holder)
   * @return challenge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3fa85f64-5717-4562-b3fc-2c963f66afa6", value = "A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (=holder)")
  @JsonProperty(JSON_PROPERTY_CHALLENGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChallenge() {
    return challenge;
  }


  @JsonProperty(JSON_PROPERTY_CHALLENGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }


  public LDProofVCDetailOptions created(String created) {
    this.created = created;
    return this;
  }

   /**
   * The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-08-25 08:37:04Z", value = "The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time")
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(String created) {
    this.created = created;
  }


  public LDProofVCDetailOptions credentialStatus(CredentialStatusOptions credentialStatus) {
    this.credentialStatus = credentialStatus;
    return this;
  }

   /**
   * The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status
   * @return credentialStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status")
  @JsonProperty(JSON_PROPERTY_CREDENTIAL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CredentialStatusOptions getCredentialStatus() {
    return credentialStatus;
  }


  @JsonProperty(JSON_PROPERTY_CREDENTIAL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredentialStatus(CredentialStatusOptions credentialStatus) {
    this.credentialStatus = credentialStatus;
  }


  public LDProofVCDetailOptions domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * The intended domain of validity for the proof
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example.com", value = "The intended domain of validity for the proof")
  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDomain() {
    return domain;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomain(String domain) {
    this.domain = domain;
  }


  public LDProofVCDetailOptions proofPurpose(String proofPurpose) {
    this.proofPurpose = proofPurpose;
    return this;
  }

   /**
   * The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification
   * @return proofPurpose
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "assertionMethod", value = "The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification")
  @JsonProperty(JSON_PROPERTY_PROOF_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProofPurpose() {
    return proofPurpose;
  }


  @JsonProperty(JSON_PROPERTY_PROOF_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProofPurpose(String proofPurpose) {
    this.proofPurpose = proofPurpose;
  }


  public LDProofVCDetailOptions proofType(String proofType) {
    this.proofType = proofType;
    return this;
  }

   /**
   * The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry
   * @return proofType
  **/
  @ApiModelProperty(example = "Ed25519Signature2018", required = true, value = "The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry")
  @JsonProperty(JSON_PROPERTY_PROOF_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProofType() {
    return proofType;
  }


  @JsonProperty(JSON_PROPERTY_PROOF_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProofType(String proofType) {
    this.proofType = proofType;
  }


  /**
   * Return true if this LDProofVCDetailOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LDProofVCDetailOptions ldProofVCDetailOptions = (LDProofVCDetailOptions) o;
    return Objects.equals(this.challenge, ldProofVCDetailOptions.challenge) &&
        Objects.equals(this.created, ldProofVCDetailOptions.created) &&
        Objects.equals(this.credentialStatus, ldProofVCDetailOptions.credentialStatus) &&
        Objects.equals(this.domain, ldProofVCDetailOptions.domain) &&
        Objects.equals(this.proofPurpose, ldProofVCDetailOptions.proofPurpose) &&
        Objects.equals(this.proofType, ldProofVCDetailOptions.proofType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challenge, created, credentialStatus, domain, proofPurpose, proofType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LDProofVCDetailOptions {\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    credentialStatus: ").append(toIndentedString(credentialStatus)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    proofPurpose: ").append(toIndentedString(proofPurpose)).append("\n");
    sb.append("    proofType: ").append(toIndentedString(proofType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

