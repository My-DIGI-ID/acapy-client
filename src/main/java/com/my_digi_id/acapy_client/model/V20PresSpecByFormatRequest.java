/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.my_digi_id.acapy_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.my_digi_id.acapy_client.model.DIFPresSpec;
import com.my_digi_id.acapy_client.model.IndyPresSpec;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.my_digi_id.acapy_client.invoker.JSON;


/**
 * V20PresSpecByFormatRequest
 */
@JsonPropertyOrder({
  V20PresSpecByFormatRequest.JSON_PROPERTY_DIF,
  V20PresSpecByFormatRequest.JSON_PROPERTY_INDY,
  V20PresSpecByFormatRequest.JSON_PROPERTY_TRACE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-08T11:11:35.214106+01:00[Europe/Berlin]")
public class V20PresSpecByFormatRequest {
  public static final String JSON_PROPERTY_DIF = "dif";
  private DIFPresSpec dif;

  public static final String JSON_PROPERTY_INDY = "indy";
  private IndyPresSpec indy;

  public static final String JSON_PROPERTY_TRACE = "trace";
  private Boolean trace;


  public V20PresSpecByFormatRequest dif(DIFPresSpec dif) {
    this.dif = dif;
    return this;
  }

   /**
   * Optional Presentation specification for DIF, overrides the PresentionExchange record&#39;s PresRequest
   * @return dif
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional Presentation specification for DIF, overrides the PresentionExchange record's PresRequest")
  @JsonProperty(JSON_PROPERTY_DIF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DIFPresSpec getDif() {
    return dif;
  }


  @JsonProperty(JSON_PROPERTY_DIF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDif(DIFPresSpec dif) {
    this.dif = dif;
  }


  public V20PresSpecByFormatRequest indy(IndyPresSpec indy) {
    this.indy = indy;
    return this;
  }

   /**
   * Presentation specification for indy
   * @return indy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Presentation specification for indy")
  @JsonProperty(JSON_PROPERTY_INDY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IndyPresSpec getIndy() {
    return indy;
  }


  @JsonProperty(JSON_PROPERTY_INDY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndy(IndyPresSpec indy) {
    this.indy = indy;
  }


  public V20PresSpecByFormatRequest trace(Boolean trace) {
    this.trace = trace;
    return this;
  }

   /**
   * Record trace information, based on agent configuration
   * @return trace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Record trace information, based on agent configuration")
  @JsonProperty(JSON_PROPERTY_TRACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTrace() {
    return trace;
  }


  @JsonProperty(JSON_PROPERTY_TRACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrace(Boolean trace) {
    this.trace = trace;
  }


  /**
   * Return true if this V20PresSpecByFormatRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V20PresSpecByFormatRequest v20PresSpecByFormatRequest = (V20PresSpecByFormatRequest) o;
    return Objects.equals(this.dif, v20PresSpecByFormatRequest.dif) &&
        Objects.equals(this.indy, v20PresSpecByFormatRequest.indy) &&
        Objects.equals(this.trace, v20PresSpecByFormatRequest.trace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dif, indy, trace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V20PresSpecByFormatRequest {\n");
    sb.append("    dif: ").append(toIndentedString(dif)).append("\n");
    sb.append("    indy: ").append(toIndentedString(indy)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

