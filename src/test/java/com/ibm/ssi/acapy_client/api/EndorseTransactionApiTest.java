/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.ssi.acapy_client.api;

import com.ibm.ssi.acapy_client.invoker.*;
import com.ibm.ssi.acapy_client.invoker.auth.*;
import com.ibm.ssi.acapy_client.model.EndorserInfo;
import com.ibm.ssi.acapy_client.model.TransactionJobs;
import com.ibm.ssi.acapy_client.model.TransactionList;
import com.ibm.ssi.acapy_client.model.TransactionRecord;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EndorseTransactionApi
 */
public class EndorseTransactionApiTest {

    private final EndorseTransactionApi api = new EndorseTransactionApi();

    /**
     * For Author to resend a particular transaction request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionTranIdResendPostTest() throws ApiException {
        //String tranId = null;
        //TransactionRecord response = api.transactionTranIdResendPost(tranId);
        // TODO: test validations
    }

    /**
     * Set Endorser Info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsConnIdSetEndorserInfoPostTest() throws ApiException {
        //String connId = null;
        //String endorserDid = null;
        //String endorserName = null;
        //EndorserInfo response = api.transactionsConnIdSetEndorserInfoPost(connId, endorserDid, endorserName);
        // TODO: test validations
    }

    /**
     * Set transaction jobs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsConnIdSetEndorserRolePostTest() throws ApiException {
        //String connId = null;
        //String transactionMyJob = null;
        //TransactionJobs response = api.transactionsConnIdSetEndorserRolePost(connId, transactionMyJob);
        // TODO: test validations
    }

    /**
     * For author to send a transaction request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsCreateRequestPostTest() throws ApiException {
        //String tranId = null;
        //Boolean endorserWriteTxn = null;
        //java.util.Date body = null;
        //TransactionRecord response = api.transactionsCreateRequestPost(tranId, endorserWriteTxn, body);
        // TODO: test validations
    }

    /**
     * Query transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsGetTest() throws ApiException {
        //TransactionList response = api.transactionsGet();
        // TODO: test validations
    }

    /**
     * For Author to cancel a particular transaction request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTranIdCancelPostTest() throws ApiException {
        //String tranId = null;
        //TransactionRecord response = api.transactionsTranIdCancelPost(tranId);
        // TODO: test validations
    }

    /**
     * For Endorser to endorse a particular transaction record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTranIdEndorsePostTest() throws ApiException {
        //String tranId = null;
        //TransactionRecord response = api.transactionsTranIdEndorsePost(tranId);
        // TODO: test validations
    }

    /**
     * Fetch a single transaction record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTranIdGetTest() throws ApiException {
        //String tranId = null;
        //TransactionRecord response = api.transactionsTranIdGet(tranId);
        // TODO: test validations
    }

    /**
     * For Endorser to refuse a particular transaction record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTranIdRefusePostTest() throws ApiException {
        //String tranId = null;
        //TransactionRecord response = api.transactionsTranIdRefusePost(tranId);
        // TODO: test validations
    }

    /**
     * For Author / Endorser to write an endorsed transaction to the ledger
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTranIdWritePostTest() throws ApiException {
        //String tranId = null;
        //TransactionRecord response = api.transactionsTranIdWritePost(tranId);
        // TODO: test validations
    }

}
