/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.ssi.acapy_client.api;

import com.ibm.ssi.acapy_client.invoker.*;
import com.ibm.ssi.acapy_client.invoker.auth.*;
import java.util.UUID;
import com.ibm.ssi.acapy_client.model.V20CredBoundOfferRequest;
import com.ibm.ssi.acapy_client.model.V20CredExRecord;
import com.ibm.ssi.acapy_client.model.V20CredExRecordDetail;
import com.ibm.ssi.acapy_client.model.V20CredExRecordListResult;
import com.ibm.ssi.acapy_client.model.V20CredIssueProblemReportRequest;
import com.ibm.ssi.acapy_client.model.V20CredIssueRequest;
import com.ibm.ssi.acapy_client.model.V20CredOfferConnFreeRequest;
import com.ibm.ssi.acapy_client.model.V20CredOfferRequest;
import com.ibm.ssi.acapy_client.model.V20CredRequestFree;
import com.ibm.ssi.acapy_client.model.V20CredRequestRequest;
import com.ibm.ssi.acapy_client.model.V20CredSendRequest;
import com.ibm.ssi.acapy_client.model.V20CredStoreRequest;
import com.ibm.ssi.acapy_client.model.V20IssueCredSchemaCore;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueCredentialV20Api
 */
public class IssueCredentialV20ApiTest {

    private final IssueCredentialV20Api api = new IssueCredentialV20Api();

    /**
     * Create a credential offer, independent of any proposal or connection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20CreateOfferPostTest() throws ApiException {
        //V20CredOfferConnFreeRequest body = null;
        //V20CredExRecord response = api.issueCredential20CreateOfferPost(body);
        // TODO: test validations
    }

    /**
     * Create credential from attribute values
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20CreatePostTest() throws ApiException {
        //V20IssueCredSchemaCore body = null;
        //V20CredExRecord response = api.issueCredential20CreatePost(body);
        // TODO: test validations
    }

    /**
     * Remove an existing credential exchange record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsCredExIdDeleteTest() throws ApiException {
        //String credExId = null;
        //Object response = api.issueCredential20RecordsCredExIdDelete(credExId);
        // TODO: test validations
    }

    /**
     * Fetch a single credential exchange record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsCredExIdGetTest() throws ApiException {
        //String credExId = null;
        //V20CredExRecordDetail response = api.issueCredential20RecordsCredExIdGet(credExId);
        // TODO: test validations
    }

    /**
     * Send holder a credential
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsCredExIdIssuePostTest() throws ApiException {
        //String credExId = null;
        //V20CredIssueRequest body = null;
        //V20CredExRecordDetail response = api.issueCredential20RecordsCredExIdIssuePost(credExId, body);
        // TODO: test validations
    }

    /**
     * Send a problem report for credential exchange
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsCredExIdProblemReportPostTest() throws ApiException {
        //String credExId = null;
        //V20CredIssueProblemReportRequest body = null;
        //Object response = api.issueCredential20RecordsCredExIdProblemReportPost(credExId, body);
        // TODO: test validations
    }

    /**
     * Send holder a credential offer in reference to a proposal with preview
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsCredExIdSendOfferPostTest() throws ApiException {
        //String credExId = null;
        //V20CredBoundOfferRequest body = null;
        //V20CredExRecord response = api.issueCredential20RecordsCredExIdSendOfferPost(credExId, body);
        // TODO: test validations
    }

    /**
     * Send issuer a credential request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsCredExIdSendRequestPostTest() throws ApiException {
        //String credExId = null;
        //V20CredRequestRequest body = null;
        //V20CredExRecord response = api.issueCredential20RecordsCredExIdSendRequestPost(credExId, body);
        // TODO: test validations
    }

    /**
     * Store a received credential
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsCredExIdStorePostTest() throws ApiException {
        //String credExId = null;
        //V20CredStoreRequest body = null;
        //V20CredExRecordDetail response = api.issueCredential20RecordsCredExIdStorePost(credExId, body);
        // TODO: test validations
    }

    /**
     * Fetch all credential exchange records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20RecordsGetTest() throws ApiException {
        //UUID connectionId = null;
        //String role = null;
        //String state = null;
        //UUID threadId = null;
        //V20CredExRecordListResult response = api.issueCredential20RecordsGet(connectionId, role, state, threadId);
        // TODO: test validations
    }

    /**
     * Send holder a credential offer, independent of any proposal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20SendOfferPostTest() throws ApiException {
        //V20CredOfferRequest body = null;
        //V20CredExRecord response = api.issueCredential20SendOfferPost(body);
        // TODO: test validations
    }

    /**
     * Send holder a credential, automating entire flow
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20SendPostTest() throws ApiException {
        //V20CredSendRequest body = null;
        //V20CredExRecord response = api.issueCredential20SendPost(body);
        // TODO: test validations
    }

    /**
     * Send issuer a credential proposal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20SendProposalPostTest() throws ApiException {
        //V20IssueCredSchemaCore body = null;
        //V20CredExRecord response = api.issueCredential20SendProposalPost(body);
        // TODO: test validations
    }

    /**
     * Send issuer a credential request not bound to an existing thread. Indy credentials cannot start at a request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredential20SendRequestPostTest() throws ApiException {
        //V20CredRequestFree body = null;
        //V20CredExRecord response = api.issueCredential20SendRequestPost(body);
        // TODO: test validations
    }

}
