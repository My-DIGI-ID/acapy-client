/*
 * IBM-Deutschland
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.ssi.acapy_client.api;

import com.ibm.ssi.acapy_client.invoker.*;
import com.ibm.ssi.acapy_client.invoker.auth.*;
import com.ibm.ssi.acapy_client.model.AdminMediationDeny;
import com.ibm.ssi.acapy_client.model.Keylist;
import com.ibm.ssi.acapy_client.model.KeylistQuery;
import com.ibm.ssi.acapy_client.model.KeylistQueryFilterRequest;
import com.ibm.ssi.acapy_client.model.KeylistUpdate;
import com.ibm.ssi.acapy_client.model.KeylistUpdateRequest;
import com.ibm.ssi.acapy_client.model.MediationCreateRequest;
import com.ibm.ssi.acapy_client.model.MediationDeny;
import com.ibm.ssi.acapy_client.model.MediationGrant;
import com.ibm.ssi.acapy_client.model.MediationList;
import com.ibm.ssi.acapy_client.model.MediationRecord;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MediationApi
 */
public class MediationApiTest {

    private final MediationApi api = new MediationApi();

    /**
     * Clear default mediator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationDefaultMediatorDeleteTest() throws ApiException {
        //MediationRecord response = api.mediationDefaultMediatorDelete();
        // TODO: test validations
    }

    /**
     * Get default mediator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationDefaultMediatorGetTest() throws ApiException {
        //MediationRecord response = api.mediationDefaultMediatorGet();
        // TODO: test validations
    }

    /**
     * Retrieve keylists by connection or role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationKeylistsGetTest() throws ApiException {
        //UUID connId = null;
        //String role = null;
        //Keylist response = api.mediationKeylistsGet(connId, role);
        // TODO: test validations
    }

    /**
     * Send keylist query to mediator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationKeylistsMediationIdSendKeylistQueryPostTest() throws ApiException {
        //UUID mediationId = null;
        //Integer paginateLimit = null;
        //Integer paginateOffset = null;
        //KeylistQueryFilterRequest body = null;
        //KeylistQuery response = api.mediationKeylistsMediationIdSendKeylistQueryPost(mediationId, paginateLimit, paginateOffset, body);
        // TODO: test validations
    }

    /**
     * Send keylist update to mediator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationKeylistsMediationIdSendKeylistUpdatePostTest() throws ApiException {
        //UUID mediationId = null;
        //KeylistUpdateRequest body = null;
        //KeylistUpdate response = api.mediationKeylistsMediationIdSendKeylistUpdatePost(mediationId, body);
        // TODO: test validations
    }

    /**
     * Set default mediator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationMediationIdDefaultMediatorPutTest() throws ApiException {
        //UUID mediationId = null;
        //MediationRecord response = api.mediationMediationIdDefaultMediatorPut(mediationId);
        // TODO: test validations
    }

    /**
     * Request mediation from connection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationRequestConnIdPostTest() throws ApiException {
        //String connId = null;
        //MediationCreateRequest body = null;
        //MediationRecord response = api.mediationRequestConnIdPost(connId, body);
        // TODO: test validations
    }

    /**
     * Query mediation requests, returns list of all mediation records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationRequestsGetTest() throws ApiException {
        //UUID connId = null;
        //List<String> mediatorTerms = null;
        //List<String> recipientTerms = null;
        //String state = null;
        //MediationList response = api.mediationRequestsGet(connId, mediatorTerms, recipientTerms, state);
        // TODO: test validations
    }

    /**
     * Delete mediation request by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationRequestsMediationIdDeleteTest() throws ApiException {
        //UUID mediationId = null;
        //MediationRecord response = api.mediationRequestsMediationIdDelete(mediationId);
        // TODO: test validations
    }

    /**
     * Deny a stored mediation request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationRequestsMediationIdDenyPostTest() throws ApiException {
        //UUID mediationId = null;
        //AdminMediationDeny body = null;
        //MediationDeny response = api.mediationRequestsMediationIdDenyPost(mediationId, body);
        // TODO: test validations
    }

    /**
     * Retrieve mediation request record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationRequestsMediationIdGetTest() throws ApiException {
        //UUID mediationId = null;
        //MediationRecord response = api.mediationRequestsMediationIdGet(mediationId);
        // TODO: test validations
    }

    /**
     * Grant received mediation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediationRequestsMediationIdGrantPostTest() throws ApiException {
        //UUID mediationId = null;
        //MediationGrant response = api.mediationRequestsMediationIdGrantPost(mediationId);
        // TODO: test validations
    }

}
